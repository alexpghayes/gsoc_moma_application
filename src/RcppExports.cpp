// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sfpca_arma
Rcpp::List sfpca_arma(arma::mat& X, double lambda_u, double lambda_v, double alpha_u, double alpha_v, arma::mat Omega_u, arma::mat Omega_v);
RcppExport SEXP _moma_sfpca_arma(SEXP XSEXP, SEXP lambda_uSEXP, SEXP lambda_vSEXP, SEXP alpha_uSEXP, SEXP alpha_vSEXP, SEXP Omega_uSEXP, SEXP Omega_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_u(lambda_uSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_v(lambda_vSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_u(alpha_uSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_v(alpha_vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_u(Omega_uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_v(Omega_vSEXP);
    rcpp_result_gen = Rcpp::wrap(sfpca_arma(X, lambda_u, lambda_v, alpha_u, alpha_v, Omega_u, Omega_v));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_moma_sfpca_arma", (DL_FUNC) &_moma_sfpca_arma, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_moma(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
